
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Jun 27 22:22:59 CEST 2015
//----------------------------------------------------

package astCUP;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Jun 27 22:22:59 CEST 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\004\005\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\005\005\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\010\005\000\002\011\003\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\006" +
    "\000\002\013\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\004\000\002\016\006\000\002\017\004\000\002" +
    "\017\002\000\002\020\005\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\007\000\002\023\007" +
    "\000\002\024\007\000\002\025\003\000\002\025\002\000" +
    "\002\026\005\000\002\026\003\000\002\027\004\000\002" +
    "\027\005\000\002\030\004\000\002\030\002\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\033\006\000\002\034\005\000\002\035\004\000\002" +
    "\003\005\000\002\003\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\005\000\002\040\004\000\002" +
    "\041\004\000\002\042\004\000\002\043\004\000\002\044" +
    "\006\000\002\045\004\000\002\045\002\000\002\046\005" +
    "\000\002\046\003\000\002\047\005\000\002\050\003\000" +
    "\002\050\002\000\002\051\007\000\002\052\004\000\002" +
    "\053\005\000\002\053\003\000\002\054\005\000\002\054" +
    "\003\000\002\055\005\000\002\055\003\000\002\056\004" +
    "\000\002\056\004\000\002\056\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\005\000\002\060\006\000\002\061" +
    "\003\000\002\061\002\000\002\062\005\000\002\062\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\066\003\000\002\066\003\000\002\067\003\000" +
    "\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\024\004\013\005\ufffe\007\006\010\025\013" +
    "\021\014\011\016\027\030\020\031\014\001\002\000\030" +
    "\004\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\014" +
    "\ufff1\016\ufff1\022\ufff1\030\ufff1\031\ufff1\001\002\000\006" +
    "\005\uffff\006\257\001\002\000\030\004\ufff4\005\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\016\ufff4\022\ufff4" +
    "\030\ufff4\031\ufff4\001\002\000\004\005\107\001\002\000" +
    "\006\005\ufffa\006\ufffa\001\002\000\016\007\006\010\025" +
    "\013\021\014\011\030\020\031\014\001\002\000\004\002" +
    "\101\001\002\000\016\007\006\010\025\013\021\014\011" +
    "\030\020\031\014\001\002\000\022\007\uffe8\010\uffe8\013" +
    "\uffe8\014\uffe8\017\uffe8\030\uffe8\031\uffe8\032\060\001\002" +
    "\000\006\005\ufffb\006\ufffb\001\002\000\026\004\ufff6\005" +
    "\ufff6\007\ufff6\010\ufff6\013\ufff6\014\ufff6\016\ufff6\022\ufff6" +
    "\030\ufff6\031\ufff6\001\002\000\006\005\ufffc\006\ufffc\001" +
    "\002\000\016\007\006\010\025\013\021\014\011\030\020" +
    "\031\014\001\002\000\030\004\ufff2\005\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\016\ufff2\022\ufff2\030\ufff2" +
    "\031\ufff2\001\002\000\030\004\ufff5\005\ufff5\007\ufff5\010" +
    "\ufff5\011\054\013\ufff5\014\ufff5\016\ufff5\022\ufff5\030\ufff5" +
    "\031\ufff5\001\002\000\004\013\053\001\002\000\030\004" +
    "\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0" +
    "\016\ufff0\022\ufff0\030\ufff0\031\ufff0\001\002\000\030\004" +
    "\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3" +
    "\016\ufff3\022\ufff3\030\ufff3\031\ufff3\001\002\000\006\005" +
    "\ufff9\006\ufff9\001\002\000\004\013\031\001\002\000\024" +
    "\004\013\005\ufffe\007\006\010\025\013\021\014\011\016" +
    "\027\030\020\031\014\001\002\000\004\023\032\001\002" +
    "\000\020\007\006\010\025\013\021\014\011\024\uffdf\030" +
    "\020\031\014\001\002\000\006\024\uffdd\067\uffdd\001\002" +
    "\000\004\024\044\001\002\000\006\024\uffe0\067\042\001" +
    "\002\000\006\013\040\022\037\001\002\000\004\013\041" +
    "\001\002\000\006\024\uffdc\067\uffdc\001\002\000\006\024" +
    "\uffdb\067\uffdb\001\002\000\016\007\006\010\025\013\021" +
    "\014\011\030\020\031\014\001\002\000\006\024\uffde\067" +
    "\uffde\001\002\000\026\004\uffd9\005\uffd9\007\uffd9\010\uffd9" +
    "\013\uffd9\014\uffd9\016\uffd9\020\046\030\uffd9\031\uffd9\001" +
    "\002\000\024\004\uffe1\005\uffe1\007\uffe1\010\uffe1\013\uffe1" +
    "\014\uffe1\016\uffe1\030\uffe1\031\uffe1\001\002\000\016\007" +
    "\006\010\025\013\021\014\011\030\020\031\014\001\002" +
    "\000\024\004\uffda\005\uffda\007\uffda\010\uffda\013\uffda\014" +
    "\uffda\016\uffda\030\uffda\031\uffda\001\002\000\004\021\051" +
    "\001\002\000\004\013\052\001\002\000\006\005\uffe3\006" +
    "\uffe3\001\002\000\012\005\ufff8\006\ufff8\015\ufff8\027\ufff8" +
    "\001\002\000\004\070\055\001\002\000\004\012\056\001" +
    "\002\000\030\004\uffef\005\uffef\007\uffef\010\uffef\011\uffef" +
    "\013\uffef\014\uffef\016\uffef\022\uffef\030\uffef\031\uffef\001" +
    "\002\000\026\004\uffeb\005\uffeb\007\uffeb\010\uffeb\013\uffeb" +
    "\014\uffeb\016\uffeb\022\uffeb\030\uffeb\031\uffeb\001\002\000" +
    "\004\013\076\001\002\000\020\007\006\010\025\013\021" +
    "\014\011\017\066\030\020\031\014\001\002\000\006\006" +
    "\uffe5\015\uffe5\001\002\000\006\006\uffe4\015\uffe4\001\002" +
    "\000\006\006\073\015\074\001\002\000\006\006\uffe6\015" +
    "\uffe6\001\002\000\004\013\031\001\002\000\024\004\013" +
    "\005\ufffe\007\006\010\025\013\021\014\011\016\027\030" +
    "\020\031\014\001\002\000\004\021\071\001\002\000\004" +
    "\013\072\001\002\000\006\006\uffe2\015\uffe2\001\002\000" +
    "\020\007\006\010\025\013\021\014\011\017\066\030\020" +
    "\031\014\001\002\000\030\004\uffea\005\uffea\007\uffea\010" +
    "\uffea\011\uffea\013\uffea\014\uffea\016\uffea\022\uffea\030\uffea" +
    "\031\uffea\001\002\000\006\006\uffe7\015\uffe7\001\002\000" +
    "\020\007\uffe9\010\uffe9\013\uffe9\014\uffe9\017\uffe9\030\uffe9" +
    "\031\uffe9\001\002\000\004\013\100\001\002\000\006\005" +
    "\ufff7\006\ufff7\001\002\000\004\002\000\001\002\000\006" +
    "\006\uffec\027\uffec\001\002\000\006\006\105\027\104\001" +
    "\002\000\030\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee" +
    "\013\uffee\014\uffee\016\uffee\022\uffee\030\uffee\031\uffee\001" +
    "\002\000\016\007\006\010\025\013\021\014\011\030\020" +
    "\031\014\001\002\000\006\006\uffed\027\uffed\001\002\000" +
    "\026\013\126\025\121\026\134\040\132\042\137\044\131" +
    "\046\117\061\114\073\113\074\116\001\002\000\020\002" +
    "\uffc7\006\uffc7\021\uffc7\050\uffc7\055\uffc7\057\uffc7\065\uffc7" +
    "\001\002\000\020\002\uffc4\006\uffc4\021\uffc4\050\uffc4\055" +
    "\uffc4\057\uffc4\065\uffc4\001\002\000\014\011\143\023\220" +
    "\034\144\035\145\071\255\001\002\000\010\013\126\025" +
    "\121\026\134\001\002\000\030\013\126\023\155\025\121" +
    "\026\134\052\150\064\153\066\167\070\154\072\157\075" +
    "\147\076\166\001\002\000\076\002\uffd7\006\uffd7\011\uffd7" +
    "\012\uffd7\021\uffd7\023\uffd7\024\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\043\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\065\uffd7\067\uffd7" +
    "\071\uffd7\001\002\000\030\013\126\023\155\025\121\026" +
    "\134\052\150\064\153\066\167\070\154\072\157\075\147" +
    "\076\166\001\002\000\030\013\126\023\155\025\121\026" +
    "\134\052\150\064\153\066\167\070\154\072\157\075\147" +
    "\076\166\001\002\000\020\002\uffc9\006\uffc9\021\uffc9\050" +
    "\uffc9\055\uffc9\057\uffc9\065\uffc9\001\002\000\076\002\uffd3" +
    "\006\uffd3\011\uffd3\012\uffd3\021\uffd3\023\uffd3\024\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\043\uffd3" +
    "\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3" +
    "\065\uffd3\067\uffd3\071\uffd3\001\002\000\020\002\uffcd\006" +
    "\uffcd\021\uffcd\050\uffcd\055\uffcd\057\uffcd\065\uffcd\001\002" +
    "\000\076\002\uffd4\006\uffd4\011\uffd4\012\uffd4\021\uffd4\023" +
    "\uffd4\024\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\041\uffd4\043\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\062\uffd4\063\uffd4\065\uffd4\067\uffd4\071\uffd4\001\002\000" +
    "\020\002\uffc6\006\uffc6\021\uffc6\050\uffc6\055\uffc6\057\uffc6" +
    "\065\uffc6\001\002\000\076\002\uffd5\006\uffd5\011\uffd5\012" +
    "\uffd5\021\uffd5\023\uffd5\024\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\041\uffd5\043\uffd5\045\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\062\uffd5\063\uffd5\065\uffd5\067\uffd5\071" +
    "\uffd5\001\002\000\076\002\uffd8\006\uffd8\011\uffd8\012\uffd8" +
    "\021\uffd8\023\uffd8\024\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\041\uffd8\043\uffd8\045\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\062\uffd8\063\uffd8\065\uffd8\067\uffd8\071\uffd8" +
    "\001\002\000\076\002\uffd6\006\uffd6\011\uffd6\012\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\041\uffd6\043\uffd6\045\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\062\uffd6\063\uffd6\065\uffd6\067\uffd6\071\uffd6\001" +
    "\002\000\020\002\uffc8\006\uffc8\021\uffc8\050\uffc8\055\uffc8" +
    "\057\uffc8\065\uffc8\001\002\000\010\013\126\025\121\026" +
    "\134\001\002\000\010\013\126\025\121\026\134\001\002" +
    "\000\010\002\001\006\227\021\001\001\002\000\076\002" +
    "\uffd2\006\uffd2\011\uffd2\012\uffd2\021\uffd2\023\uffd2\024\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\043" +
    "\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\062\uffd2\063" +
    "\uffd2\065\uffd2\067\uffd2\071\uffd2\001\002\000\020\002\uffcb" +
    "\006\uffcb\021\uffcb\050\uffcb\055\uffcb\057\uffcb\065\uffcb\001" +
    "\002\000\020\002\uffcc\006\uffcc\021\uffcc\050\uffcc\055\uffcc" +
    "\057\uffcc\065\uffcc\001\002\000\010\013\126\025\121\026" +
    "\134\001\002\000\020\002\uffca\006\uffca\021\uffca\050\uffca" +
    "\055\uffca\057\uffca\065\uffca\001\002\000\020\002\uffc5\006" +
    "\uffc5\021\uffc5\050\uffc5\055\uffc5\057\uffc5\065\uffc5\001\002" +
    "\000\026\002\uffc0\006\uffc0\011\143\021\uffc0\034\144\035" +
    "\145\050\uffc0\055\uffc0\057\uffc0\065\uffc0\001\002\000\030" +
    "\013\126\023\155\025\121\026\134\052\150\064\153\066" +
    "\167\070\154\072\157\075\147\076\166\001\002\000\004" +
    "\013\146\001\002\000\076\002\uffcf\006\uffcf\011\uffcf\012" +
    "\uffcf\021\uffcf\023\uffcf\024\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\041\uffcf\043\uffcf\045\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\062\uffcf\063\uffcf\065\uffcf\067\uffcf\071" +
    "\uffcf\001\002\000\076\002\uffd0\006\uffd0\011\uffd0\012\uffd0" +
    "\021\uffd0\023\uffd0\024\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\041\uffd0\043\uffd0\045\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\062\uffd0\063\uffd0\065\uffd0\067\uffd0\071\uffd0" +
    "\001\002\000\020\013\uff90\023\uff90\025\uff90\026\uff90\066" +
    "\uff90\070\uff90\072\uff90\001\002\000\030\013\uff93\023\uff93" +
    "\025\uff93\026\uff93\052\uff93\064\uff93\066\uff93\070\uff93\072" +
    "\uff93\075\uff93\076\uff93\001\002\000\064\002\uffa7\006\uffa7" +
    "\012\uffa7\021\uffa7\024\uffa7\033\uffa7\036\uffa7\037\uffa7\041" +
    "\uffa7\043\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\062" +
    "\uffa7\063\uffa7\065\uffa7\067\uffa7\001\002\000\074\002\uffa9" +
    "\006\uffa9\011\143\012\uffa9\021\uffa9\023\220\024\uffa9\033" +
    "\uffa9\034\144\035\145\036\uffa9\037\uffa9\041\uffa9\043\uffa9" +
    "\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\062\uffa9\063\uffa9" +
    "\065\uffa9\067\uffa9\001\002\000\030\013\uff92\023\uff92\025" +
    "\uff92\026\uff92\052\uff92\064\uff92\066\uff92\070\uff92\072\uff92" +
    "\075\uff92\076\uff92\001\002\000\064\002\uffab\006\uffab\012" +
    "\uffab\021\uffab\024\uffab\033\uffab\036\uffab\037\uffab\041\uffab" +
    "\043\uffab\045\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\062\uffab" +
    "\063\uffab\065\uffab\067\uffab\001\002\000\030\013\126\023" +
    "\155\025\121\026\134\052\150\064\153\066\167\070\154" +
    "\072\157\075\147\076\166\001\002\000\064\002\uffac\006" +
    "\uffac\012\uffac\021\uffac\024\uffac\033\uffac\036\uffac\037\uffac" +
    "\041\uffac\043\uffac\045\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac" +
    "\062\uffac\063\uffac\065\uffac\067\uffac\001\002\000\064\002" +
    "\uffaa\006\uffaa\012\uffaa\021\uffaa\024\uffaa\033\uffaa\036\uffaa" +
    "\037\uffaa\041\uffaa\043\uffaa\045\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\062\uffaa\063\uffaa\065\uffaa\067\uffaa\001\002\000" +
    "\064\002\uffaf\006\uffaf\012\uffaf\021\uffaf\024\uffaf\033\uffaf" +
    "\036\uffaf\037\uffaf\041\uffaf\043\uffaf\045\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\062\uffaf\063\uffaf\065\uffaf\067\uffaf\001" +
    "\002\000\064\002\uffb1\006\uffb1\012\uffb1\021\uffb1\024\uffb1" +
    "\033\uffb1\036\uffb1\037\uffb1\041\uffb1\043\uffb1\045\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\214\055\uffb1" +
    "\056\213\057\uffb1\060\211\062\212\063\uffb1\065\uffb1\067" +
    "\uffb1\001\002\000\054\002\uffb3\006\uffb3\012\uffb3\021\uffb3" +
    "\024\uffb3\033\173\036\176\037\202\041\201\043\203\045" +
    "\204\047\205\050\uffb3\051\200\052\175\053\uffb3\055\uffb3" +
    "\057\uffb3\063\uffb3\065\uffb3\067\uffb3\001\002\000\030\013" +
    "\126\023\155\025\121\026\134\052\150\064\153\066\167" +
    "\070\154\072\157\075\147\076\166\001\002\000\004\012" +
    "\171\001\002\000\020\013\126\023\155\025\121\026\134" +
    "\066\167\070\154\072\157\001\002\000\020\013\uff91\023" +
    "\uff91\025\uff91\026\uff91\066\uff91\070\uff91\072\uff91\001\002" +
    "\000\064\002\uffa8\006\uffa8\012\uffa8\021\uffa8\024\uffa8\033" +
    "\uffa8\036\uffa8\037\uffa8\041\uffa8\043\uffa8\045\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\060\uffa8\062\uffa8\063\uffa8\065\uffa8\067\uffa8" +
    "\001\002\000\064\002\uffad\006\uffad\012\uffad\021\uffad\024" +
    "\uffad\033\uffad\036\uffad\037\uffad\041\uffad\043\uffad\045\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\062\uffad\063\uffad\065\uffad" +
    "\067\uffad\001\002\000\076\002\uffd1\006\uffd1\011\uffd1\012" +
    "\uffd1\021\uffd1\023\uffd1\024\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\041\uffd1\043\uffd1\045\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\062\uffd1\063\uffd1\065\uffd1\067\uffd1\071" +
    "\uffd1\001\002\000\064\002\uffae\006\uffae\012\uffae\021\uffae" +
    "\024\uffae\033\uffae\036\uffae\037\uffae\041\uffae\043\uffae\045" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\062\uffae\063\uffae\065" +
    "\uffae\067\uffae\001\002\000\030\013\uff9e\023\uff9e\025\uff9e" +
    "\026\uff9e\052\uff9e\064\uff9e\066\uff9e\070\uff9e\072\uff9e\075" +
    "\uff9e\076\uff9e\001\002\000\030\013\126\023\155\025\121" +
    "\026\134\052\150\064\153\066\167\070\154\072\157\075" +
    "\147\076\166\001\002\000\030\013\uff98\023\uff98\025\uff98" +
    "\026\uff98\052\uff98\064\uff98\066\uff98\070\uff98\072\uff98\075" +
    "\uff98\076\uff98\001\002\000\030\013\uffa0\023\uffa0\025\uffa0" +
    "\026\uffa0\052\uffa0\064\uffa0\066\uffa0\070\uffa0\072\uffa0\075" +
    "\uffa0\076\uffa0\001\002\000\030\013\126\023\155\025\121" +
    "\026\134\052\150\064\153\066\167\070\154\072\157\075" +
    "\147\076\166\001\002\000\030\013\uff99\023\uff99\025\uff99" +
    "\026\uff99\052\uff99\064\uff99\066\uff99\070\uff99\072\uff99\075" +
    "\uff99\076\uff99\001\002\000\030\013\uff9d\023\uff9d\025\uff9d" +
    "\026\uff9d\052\uff9d\064\uff9d\066\uff9d\070\uff9d\072\uff9d\075" +
    "\uff9d\076\uff9d\001\002\000\030\013\uff9f\023\uff9f\025\uff9f" +
    "\026\uff9f\052\uff9f\064\uff9f\066\uff9f\070\uff9f\072\uff9f\075" +
    "\uff9f\076\uff9f\001\002\000\030\013\uff9c\023\uff9c\025\uff9c" +
    "\026\uff9c\052\uff9c\064\uff9c\066\uff9c\070\uff9c\072\uff9c\075" +
    "\uff9c\076\uff9c\001\002\000\030\013\uff9b\023\uff9b\025\uff9b" +
    "\026\uff9b\052\uff9b\064\uff9b\066\uff9b\070\uff9b\072\uff9b\075" +
    "\uff9b\076\uff9b\001\002\000\030\013\uff9a\023\uff9a\025\uff9a" +
    "\026\uff9a\052\uff9a\064\uff9a\066\uff9a\070\uff9a\072\uff9a\075" +
    "\uff9a\076\uff9a\001\002\000\040\002\uffb4\006\uffb4\012\uffb4" +
    "\021\uffb4\024\uffb4\047\205\050\uffb4\051\200\052\175\053" +
    "\uffb4\055\uffb4\057\uffb4\063\uffb4\065\uffb4\067\uffb4\001\002" +
    "\000\064\002\uffb2\006\uffb2\012\uffb2\021\uffb2\024\uffb2\033" +
    "\uffb2\036\uffb2\037\uffb2\041\uffb2\043\uffb2\045\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\214\055\uffb2\056" +
    "\213\057\uffb2\060\211\062\212\063\uffb2\065\uffb2\067\uffb2" +
    "\001\002\000\030\013\126\023\155\025\121\026\134\052" +
    "\150\064\153\066\167\070\154\072\157\075\147\076\166" +
    "\001\002\000\030\013\uff95\023\uff95\025\uff95\026\uff95\052" +
    "\uff95\064\uff95\066\uff95\070\uff95\072\uff95\075\uff95\076\uff95" +
    "\001\002\000\030\013\uff94\023\uff94\025\uff94\026\uff94\052" +
    "\uff94\064\uff94\066\uff94\070\uff94\072\uff94\075\uff94\076\uff94" +
    "\001\002\000\030\013\uff96\023\uff96\025\uff96\026\uff96\052" +
    "\uff96\064\uff96\066\uff96\070\uff96\072\uff96\075\uff96\076\uff96" +
    "\001\002\000\030\013\uff97\023\uff97\025\uff97\026\uff97\052" +
    "\uff97\064\uff97\066\uff97\070\uff97\072\uff97\075\uff97\076\uff97" +
    "\001\002\000\064\002\uffb0\006\uffb0\012\uffb0\021\uffb0\024" +
    "\uffb0\033\uffb0\036\uffb0\037\uffb0\041\uffb0\043\uffb0\045\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\062\uffb0\063\uffb0\065\uffb0" +
    "\067\uffb0\001\002\000\004\024\217\001\002\000\064\002" +
    "\uffa6\006\uffa6\012\uffa6\021\uffa6\024\uffa6\033\uffa6\036\uffa6" +
    "\037\uffa6\041\uffa6\043\uffa6\045\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\062\uffa6\063\uffa6\065\uffa6\067\uffa6\001\002\000" +
    "\032\013\126\023\155\024\uffa3\025\121\026\134\052\150" +
    "\064\153\066\167\070\154\072\157\075\147\076\166\001" +
    "\002\000\004\024\226\001\002\000\006\024\uffa4\067\224" +
    "\001\002\000\006\024\uffa1\067\uffa1\001\002\000\030\013" +
    "\126\023\155\025\121\026\134\052\150\064\153\066\167" +
    "\070\154\072\157\075\147\076\166\001\002\000\006\024" +
    "\uffa2\067\uffa2\001\002\000\064\002\uffa5\006\uffa5\012\uffa5" +
    "\021\uffa5\024\uffa5\033\uffa5\036\uffa5\037\uffa5\041\uffa5\043" +
    "\uffa5\045\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\062\uffa5\063" +
    "\uffa5\065\uffa5\067\uffa5\001\002\000\026\013\126\025\121" +
    "\026\134\040\132\042\137\044\131\046\117\061\114\073" +
    "\113\074\116\001\002\000\020\002\uffce\006\uffce\021\uffce" +
    "\050\uffce\055\uffce\057\uffce\065\uffce\001\002\000\026\002" +
    "\uffc1\006\uffc1\011\143\021\uffc1\034\144\035\145\050\uffc1" +
    "\055\uffc1\057\uffc1\065\uffc1\001\002\000\026\002\uffbf\006" +
    "\uffbf\011\143\021\uffbf\034\144\035\145\050\uffbf\055\uffbf" +
    "\057\uffbf\065\uffbf\001\002\000\010\050\uffba\055\uffba\057" +
    "\uffba\001\002\000\010\050\241\055\243\057\uffbc\001\002" +
    "\000\004\053\236\001\002\000\034\013\126\025\121\026" +
    "\134\040\132\042\137\044\131\046\117\050\uffb7\055\uffb7" +
    "\057\uffb7\061\114\073\113\074\116\001\002\000\010\050" +
    "\uffb9\055\uffb9\057\uffb9\001\002\000\014\006\227\050\uffb8" +
    "\055\uffb8\057\uffb8\065\uffb8\001\002\000\030\013\126\025" +
    "\121\026\134\040\132\042\137\044\131\046\117\057\uffb7" +
    "\061\114\073\113\074\116\001\002\000\004\057\245\001" +
    "\002\000\030\013\126\023\155\025\121\026\134\052\150" +
    "\064\153\066\167\070\154\072\157\075\147\076\166\001" +
    "\002\000\010\050\uffbb\055\uffbb\057\uffbb\001\002\000\020" +
    "\002\uffbe\006\uffbe\021\uffbe\050\uffbe\055\uffbe\057\uffbe\065" +
    "\uffbe\001\002\000\004\057\uffbd\001\002\000\020\002\uffb5" +
    "\006\uffb5\021\uffb5\050\uffb5\055\uffb5\057\uffb5\065\uffb5\001" +
    "\002\000\004\063\251\001\002\000\030\013\126\025\121" +
    "\026\134\040\132\042\137\044\131\046\117\061\114\065" +
    "\uffb7\073\113\074\116\001\002\000\004\065\253\001\002" +
    "\000\020\002\uffb6\006\uffb6\021\uffb6\050\uffb6\055\uffb6\057" +
    "\uffb6\065\uffb6\001\002\000\026\002\uffc2\006\uffc2\011\143" +
    "\021\uffc2\034\144\035\145\050\uffc2\055\uffc2\057\uffc2\065" +
    "\uffc2\001\002\000\030\013\126\023\155\025\121\026\134" +
    "\052\150\064\153\066\167\070\154\072\157\075\147\076" +
    "\166\001\002\000\020\002\uffc3\006\uffc3\021\uffc3\050\uffc3" +
    "\055\uffc3\057\uffc3\065\uffc3\001\002\000\022\004\013\007" +
    "\006\010\025\013\021\014\011\016\027\030\020\031\014" +
    "\001\002\000\006\005\ufffd\006\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\032\002\006\004\011\005\004\006\016\007" +
    "\014\010\007\011\022\012\021\013\003\015\015\016\023" +
    "\022\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\101\011\022\012\021\013\003\014\102\015\015\016" +
    "\023\001\001\000\002\001\001\000\014\011\076\012\021" +
    "\013\003\015\015\016\023\001\001\000\004\017\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\056\012\021\013\003\015\015\016\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\027\001\001\000\032\002\006\004\047\005\004" +
    "\006\016\007\014\010\007\011\022\012\021\013\003\015" +
    "\015\016\023\022\025\001\001\000\002\001\001\000\022" +
    "\011\035\012\021\013\003\015\015\016\023\025\033\026" +
    "\034\027\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\035\012\021" +
    "\013\003\015\015\016\023\027\042\001\001\000\002\001" +
    "\001\000\004\030\044\001\001\000\002\001\001\000\014" +
    "\011\046\012\021\013\003\015\015\016\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\061\011\022\012\021\013\003\015\015\016" +
    "\023\020\063\021\064\023\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\066\001\001\000\032\002\006\004\067\005\004" +
    "\006\016\007\014\010\007\011\022\012\021\013\003\015" +
    "\015\016\023\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\061\011\022\012" +
    "\021\013\003\015\015\016\023\021\074\023\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\105\011\022\012\021\013\003\015\015\016\023\001\001" +
    "\000\002\001\001\000\042\003\132\031\111\032\114\033" +
    "\126\034\124\035\122\036\121\037\135\040\134\041\137" +
    "\042\117\043\127\044\107\051\123\052\140\060\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\253\032\114\033\126\034\124\035\122\001" +
    "\001\000\034\031\151\032\114\033\126\034\124\035\122" +
    "\053\247\054\161\055\160\056\157\057\155\060\150\066" +
    "\162\067\164\001\001\000\002\001\001\000\034\031\151" +
    "\032\114\033\126\034\124\035\122\053\246\054\161\055" +
    "\160\056\157\057\155\060\150\066\162\067\164\001\001" +
    "\000\040\031\151\032\114\033\126\034\124\035\122\046" +
    "\233\047\232\053\234\054\161\055\160\056\157\057\155" +
    "\060\150\066\162\067\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\031\231\032\114\033\126" +
    "\034\124\035\122\001\001\000\014\031\230\032\114\033" +
    "\126\034\124\035\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\141\032\114\033\126\034\124\035\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\031" +
    "\151\032\114\033\126\034\124\035\122\053\163\054\161" +
    "\055\160\056\157\057\155\060\150\066\162\067\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\031\151\032\114\033\126\034\124\035\122\053\215\054" +
    "\161\055\160\056\157\057\155\060\150\066\162\067\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\207\001\001\000\006\063\176\064\173" +
    "\001\001\000\026\031\151\032\114\033\126\034\124\035" +
    "\122\056\171\057\155\060\150\066\162\067\164\001\001" +
    "\000\002\001\001\000\020\031\151\032\114\033\126\034" +
    "\124\035\122\057\167\060\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\031\151\032\114" +
    "\033\126\034\124\035\122\055\206\056\157\057\155\060" +
    "\150\066\162\067\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\031\151\032\114\033\126\034\124\035" +
    "\122\054\205\055\160\056\157\057\155\060\150\066\162" +
    "\067\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\173\001\001\000\004\065\207\001" +
    "\001\000\026\031\151\032\114\033\126\034\124\035\122" +
    "\056\214\057\155\060\150\066\162\067\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\031\151\032\114\033\126\034\124\035\122" +
    "\053\222\054\161\055\160\056\157\057\155\060\150\061" +
    "\220\062\221\066\162\067\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\031\151\032" +
    "\114\033\126\034\124\035\122\053\224\054\161\055\160" +
    "\056\157\057\155\060\150\066\162\067\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\031\111\032\114" +
    "\033\126\034\124\035\122\036\227\037\135\040\134\041" +
    "\137\042\117\043\127\044\107\051\123\052\140\060\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\241\001\001\000\002" +
    "\001\001\000\044\003\237\031\111\032\114\033\126\034" +
    "\124\035\122\036\121\037\135\040\134\041\137\042\117" +
    "\043\127\044\107\050\236\051\123\052\140\060\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\237" +
    "\031\111\032\114\033\126\034\124\035\122\036\121\037" +
    "\135\040\134\041\137\042\117\043\127\044\107\050\245" +
    "\051\123\052\140\060\110\001\001\000\002\001\001\000" +
    "\036\031\151\032\114\033\126\034\124\035\122\047\243" +
    "\053\234\054\161\055\160\056\157\057\155\060\150\066" +
    "\162\067\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\237\031\111\032\114\033\126\034\124\035\122" +
    "\036\121\037\135\040\134\041\137\042\117\043\127\044" +
    "\107\050\251\051\123\052\140\060\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\031" +
    "\151\032\114\033\126\034\124\035\122\053\255\054\161" +
    "\055\160\056\157\057\155\060\150\066\162\067\164\001" +
    "\001\000\002\001\001\000\024\006\257\007\014\010\007" +
    "\011\022\012\021\013\003\015\015\016\023\022\025\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

  
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
 	errores.errorSintactico((UnidadLexica)unidadLexica);
   }

   public int fila() {
     return ((AnalizadorLexicoTiny)getScanner()).fila();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Decs SEPARADOR Instrucciones 
            {
              Object RESULT =null;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object Ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Programa.programa((Decs)decs, (Instrucciones)Ins, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Programa",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decs ::= LDecs 
            {
              Object RESULT =null;
		Object ldecs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Decs.listDecs((LDecs)ldecs, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decs",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= 
            {
              Object RESULT =null;
		RESULT=Decs.listDecsVacia(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decs",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecs ::= LDecs PYCOMA Declaracion 
            {
              Object RESULT =null;
		Object ldecs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LDecs.seqCompuestaDecs((LDecs)ldecs, (Declaracion)dec, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LDecs",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= Declaracion 
            {
              Object RESULT =null;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LDecs.seqSimpleDecs((Declaracion)dec, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LDecs",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= DecVariable 
            {
              Object RESULT =null;
		Object decv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Declaracion.decV((DecVar)decv, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= DecTipo 
            {
              Object RESULT =null;
		Object dect = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Declaracion.decT((DecTipo)dect, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= DecFun 
            {
              Object RESULT =null;
		Object decfun = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Declaracion.decF((DecFun)decfun, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DecVariable ::= DTipo0 IDENTIFICADOR 
            {
              Object RESULT =null;
		Object dtipo0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DecVar.decVariable((DTipo0)dtipo0, (String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DecVariable",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DecTipo ::= TIPO DTipo0 IDENTIFICADOR 
            {
              Object RESULT =null;
		Object dtipo0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DecTipo.decTipo((DTipo0)dtipo0, (String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DecTipo",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DTipo0 ::= DTipoPuntero 
            {
              Object RESULT =null;
		Object dtipopuntero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DTipo0.dTipoPuntero((DTipoPuntero)dtipopuntero, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo0",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DTipo0 ::= DTipo1 
            {
              Object RESULT =null;
		Object dtipo1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DTipo0.dTipo1((DTipo1)dtipo1, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo0",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DTipo1 ::= INT 
            {
              Object RESULT =null;
		RESULT=DTipo1.tInt(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DTipo1 ::= REAL 
            {
              Object RESULT =null;
		RESULT=DTipo1.tReal(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DTipo1 ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DTipo1.tipoid((String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DTipo1 ::= DTipoRegistro 
            {
              Object RESULT =null;
		Object dtiporegistro = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DTipo1.dTipoRegistro((DTipoRegistro)dtiporegistro, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DTipo1 ::= DTipoObjeto 
            {
              Object RESULT =null;
		Object dtipoobjeto = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DTipo1.dTipoObjeto((DTipoObjeto)dtipoobjeto, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DTipo1 ::= DTipo1 CAP NUMENTERO CCIERRE 
            {
              Object RESULT =null;
		Object dtipo1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=DTipo1.array((DTipo1)dtipo1, (String)n, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipo1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DTipoRegistro ::= REC LCampos ENDREC 
            {
              Object RESULT =null;
		Object lcampos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=DTipoRegistro.registro((LCampos)lcampos, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipoRegistro",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LCampos ::= LCampos PYCOMA DecVariable 
            {
              Object RESULT =null;
		Object lcampos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object decvariable = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LCampos.seqCompuestaVars((LCampos)lcampos, (DecVar)decvariable, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LCampos",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LCampos ::= DecVariable 
            {
              Object RESULT =null;
		Object decvariable = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LCampos.seqSimpleVars((DecVar)decvariable, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LCampos",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DTipoPuntero ::= POINTER DTipo0 
            {
              Object RESULT =null;
		Object dtipo0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DTipoPuntero.pointer((DTipo0)dtipo0, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipoPuntero",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DTipoObjeto ::= OBJECT Superclase LCamposOMet ENDOBJECT 
            {
              Object RESULT =null;
		Object superclase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object lcamposomet = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=DTipoObjeto.objeto((Superclase)superclase, (Campos)lcamposomet, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DTipoObjeto",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Superclase ::= EXTENDS IDENTIFICADOR 
            {
              Object RESULT =null;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Superclase.superclase((String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Superclase",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Superclase ::= 
            {
              Object RESULT =null;
		RESULT=Superclase.superclaseVacia(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Superclase",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCamposOMet ::= LCamposOMet PYCOMA Campo 
            {
              Object RESULT =null;
		Object lcamposomet = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object campo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Campos.seqCompuestaCampos((Campos)lcamposomet, (Campo)campo, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LCamposOMet",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCamposOMet ::= Campo 
            {
              Object RESULT =null;
		Object campo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Campos.seqSimpleCampos((Campo)campo, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LCamposOMet",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Campo ::= DecVariable 
            {
              Object RESULT =null;
		Object decvariable = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Campo.campo((DecVar)decvariable, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Campo",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Campo ::= DecMet 
            {
              Object RESULT =null;
		Object decmet = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Campo.campoMet((DecMet)decmet, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Campo",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DecFun ::= FUN Cabecera Programa END IDENTIFICADOR 
            {
              Object RESULT =null;
		Object cabecera = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object programa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DecFun.decFun((Cabecera)cabecera, (Programa)programa, (String)id, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DecFun",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DecMet ::= METHOD Cabecera Programa END IDENTIFICADOR 
            {
              Object RESULT =null;
		Object cabecera = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object programa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DecMet.decMet((Cabecera)cabecera, (Programa)programa, (String)id, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DecMet",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Cabecera ::= IDENTIFICADOR PAP Parametros PCIERRE TipoRet 
            {
              Object RESULT =null;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object tiporet = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Cabecera.cabe((String)lexId, (Parametros)parametros, (TipoRet)tiporet,  parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Cabecera",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parametros ::= LParametros 
            {
              Object RESULT =null;
		Object lparametros = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Parametros.params((LParametros)lparametros, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parametros ::= 
            {
              Object RESULT =null;
		RESULT=Parametros.paramsVacios(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LParametros ::= LParametros COMA Parametro 
            {
              Object RESULT =null;
		Object lparametros = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LParametros.seqCompuestaParams((LParametros)lparametros, (Parametro)parametro, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LParametros",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LParametros ::= Parametro 
            {
              Object RESULT =null;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LParametros.seqSimpleParams((Parametro)parametro, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LParametros",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parametro ::= DTipo0 IDENTIFICADOR 
            {
              Object RESULT =null;
		Object dtipo0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Parametro.param((DTipo0)dtipo0, (String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Parametro",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Parametro ::= DTipo0 REFERENCIA IDENTIFICADOR 
            {
              Object RESULT =null;
		Object dtipo0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Parametro.paramRef((DTipo0)dtipo0, (String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Parametro",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoRet ::= RETURNS DTipo0 
            {
              Object RESULT =null;
		Object dtipo0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=TipoRet.tReturn((DTipo0)dtipo0, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TipoRet",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoRet ::= 
            {
              Object RESULT =null;
		RESULT=TipoRet.sinReturn(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TipoRet",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Designador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Designador.var((String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Designador",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Designador ::= OtroDesignador 
            {
              Object RESULT =null;
		Object otrodesignador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Designador.otroDesignador((OtroDesignador)otrodesignador, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Designador",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Designador ::= DesigArray 
            {
              Object RESULT =null;
		Object desigarray = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Designador.desigArray((DesigArray)desigarray, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Designador",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Designador ::= DesigAtributo 
            {
              Object RESULT =null;
		Object desigatributo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Designador.desigAtributo((DesigAtributo)desigatributo, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Designador",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Designador ::= DesigPuntero 
            {
              Object RESULT =null;
		Object desigpuntero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Designador.desigPuntero((DesigPuntero)desigpuntero, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Designador",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OtroDesignador ::= THIS 
            {
              Object RESULT =null;
		RESULT=OtroDesignador.dThis(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroDesignador",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OtroDesignador ::= SUPER 
            {
              Object RESULT =null;
		RESULT=OtroDesignador.dSuper(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroDesignador",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DesigArray ::= Designador CAP Exp0 CCIERRE 
            {
              Object RESULT =null;
		Object designador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object exp0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=DesigArray.indxElem((Designador)designador, (Exp0)exp0, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DesigArray",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DesigAtributo ::= Designador PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;
		Object designador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object lexId = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=DesigAtributo.selCampo((Designador)designador, (String)lexId, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DesigAtributo",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DesigPuntero ::= Designador APOSTROFE 
            {
              Object RESULT =null;
		Object designador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=DesigPuntero.deref((Designador)designador, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DesigPuntero",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instrucciones ::= Instrucciones PYCOMA Instruccion 
            {
              Object RESULT =null;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instrucciones.seqCompuestaIs((Instrucciones)instrucciones, (Instruccion)instruccion, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instrucciones ::= Instruccion 
            {
              Object RESULT =null;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instrucciones.seqSimpleIs((Instruccion)instruccion, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruccion ::= IAsig 
            {
              Object RESULT =null;
		Object iasig = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iAsig((IAsig)iasig, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruccion ::= IIn 
            {
              Object RESULT =null;
		Object iin = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iIn((IIn)iin, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruccion ::= IOut 
            {
              Object RESULT =null;
		Object iout = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iOut((IOut)iout, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruccion ::= IAlloc 
            {
              Object RESULT =null;
		Object ialloc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iAlloc((IAlloc)ialloc, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruccion ::= IFree 
            {
              Object RESULT =null;
		Object ifree = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iFree((IFree)ifree, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instruccion ::= IIf 
            {
              Object RESULT =null;
		Object iif = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iIf((IIf)iif, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruccion ::= IWhile 
            {
              Object RESULT =null;
		Object iwhile = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iWhile((IWhile)iwhile, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Instruccion ::= IReturn 
            {
              Object RESULT =null;
		Object ireturn = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.iReturn((IReturn)ireturn, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Instruccion ::= InvocacionFunMet 
            {
              Object RESULT =null;
		Object invoc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Instruccion.invocFunMet((InvocacionFunMet)invoc, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IAsig ::= Designador ASIG Exp0 
            {
              Object RESULT =null;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object exp0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=IAsig.iasig((Designador)des, (Exp0)exp0, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IAsig",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IIn ::= IN Designador 
            {
              Object RESULT =null;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=IIn.iin((Designador)des, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IIn",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOut ::= OUT Designador 
            {
              Object RESULT =null;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=IOut.iout((Designador)des, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IOut",31, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IAlloc ::= ALLOC Designador 
            {
              Object RESULT =null;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=IAlloc.ialloc((Designador)des, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IAlloc",32, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IFree ::= FREE Designador 
            {
              Object RESULT =null;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=IFree.ifree((Designador)des, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IFree",33, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IIf ::= IF Casos ParteElse ENDIF 
            {
              Object RESULT =null;
		Object casos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object parteelse = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=IIf.iIf((Casos)casos, (ParteElse)parteelse, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IIf",34, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ParteElse ::= ELSE Is 
            {
              Object RESULT =null;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=ParteElse.pElse((Is)is, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParteElse",35, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ParteElse ::= 
            {
              Object RESULT =null;
		RESULT=ParteElse.sinpElse(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParteElse",35, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Casos ::= Casos ELSIF Caso 
            {
              Object RESULT =null;
		Object casos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object caso = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Casos.seqCompuestaCasos((Casos)casos, (Caso)caso, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Casos",36, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Casos ::= Caso 
            {
              Object RESULT =null;
		Object caso = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Casos.seqSimpleCasos((Caso)caso, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Casos",36, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Caso ::= Exp0 THEN Is 
            {
              Object RESULT =null;
		Object exp0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Caso.caso((Exp0)exp0, (Is)is, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Caso",37, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Is ::= Instrucciones 
            {
              Object RESULT =null;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Is.instrucciones((Instrucciones)is, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Is",38, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Is ::= 
            {
              Object RESULT =null;
		RESULT=Is.sinInstrucciones(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Is",38, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IWhile ::= WHILE Exp0 DO Is ENDWHILE 
            {
              Object RESULT =null;
		Object exp0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=IWhile.iwhile((Exp0)exp0, (Is)is, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IWhile",39, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IReturn ::= RETURN Exp0 
            {
              Object RESULT =null;
		Object exp0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=IReturn.iReturn((Exp0)exp0, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IReturn",40, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp0 ::= Exp1 Op0NA Exp1 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp0.exp01((Exp1)e1, (Op0NA)op, (Exp1)e2, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp0",41, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp0 ::= Exp1 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp0.exp02((Exp1)e, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp0",41, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp1 ::= Exp1 Op1 Exp2 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp1.exp11((Exp1)e1, (Op1)op, (Exp2)e2, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp1",42, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp1 ::= Exp2 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp1.exp12((Exp2)e, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp1",42, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp2 ::= Exp2 Op2 Exp3 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp2.exp21((Exp2)e1, (Op2)op, (Exp3)e2, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp2",43, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp2 ::= Exp3 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp2.exp22((Exp3)e, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp2",43, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp3 ::= Op3 Exp3 
            {
              Object RESULT =null;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp3.exp31((Op3)op, (Exp3)e, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp3",44, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp3 ::= Op3NA Exp4 
            {
              Object RESULT =null;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp3.exp32((Op3NA)op, (Exp4)e, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp3",44, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp3 ::= Exp4 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp3.exp33((Exp4)e, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp3",44, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp4 ::= NUMENTERO 
            {
              Object RESULT =null;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp4.numEntero((String)n, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp4",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp4 ::= NUMREAL 
            {
              Object RESULT =null;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp4.numReal((String)r, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp4",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp4 ::= Designador 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp4.mem((Designador)d, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp4",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp4 ::= NULL 
            {
              Object RESULT =null;
		RESULT = Exp4.eNull(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp4",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp4 ::= InvocacionFunMet 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=Exp4.invocFunMet((InvocacionFunMet)i, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp4",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp4 ::= PAP Exp0 PCIERRE 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=Exp4.exp41((Exp0)e, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp4",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // InvocacionFunMet ::= Designador PAP ParamsInvoc PCIERRE 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=InvocacionFunMet.llamada((Designador)d, (ParamsInvoc)p, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InvocacionFunMet",46, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ParamsInvoc ::= LParamsInvoc 
            {
              Object RESULT =null;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=ParamsInvoc.paramsInvoc((LParamsInvoc)l, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsInvoc",47, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ParamsInvoc ::= 
            {
              Object RESULT =null;
		RESULT=ParamsInvoc.paramsInvocVacios(parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsInvoc",47, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LParamsInvoc ::= LParamsInvoc COMA Exp0 
            {
              Object RESULT =null;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LParamsInvoc.seqCompuestaExps((LParamsInvoc)l, (Exp0)e0, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LParamsInvoc",48, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LParamsInvoc ::= Exp0 
            {
              Object RESULT =null;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=LParamsInvoc.seqSimpleExps((Exp0)e0, parser.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LParamsInvoc",48, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Op0NA ::= MENOR 
            {
              Object RESULT =null;
		 RESULT=Op0NA.op0naMenor(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op0NA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Op0NA ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT=Op0NA.op0naMayor(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op0NA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Op0NA ::= MENORIGUAL 
            {
              Object RESULT =null;
		 RESULT=Op0NA.op0naMenorIgual(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op0NA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Op0NA ::= MAYORIGUAL 
            {
              Object RESULT =null;
		 RESULT=Op0NA.op0naMayorIgual(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op0NA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Op0NA ::= IGUAL 
            {
              Object RESULT =null;
		 RESULT=Op0NA.op0naIgual(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op0NA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Op0NA ::= DISTINTO 
            {
              Object RESULT =null;
		 RESULT=Op0NA.op0naDistinto(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op0NA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Op1 ::= OR 
            {
              Object RESULT =null;
		 RESULT=Op1.op1Or(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op1",50, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Op1 ::= MAS 
            {
              Object RESULT =null;
		 RESULT=Op1.op1Mas(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op1",50, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Op1 ::= MENOS 
            {
              Object RESULT =null;
		 RESULT=Op1.op1Menos(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op1",50, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Op2 ::= POR 
            {
              Object RESULT =null;
		 RESULT=Op2.op2Por(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op2",51, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Op2 ::= DIV 
            {
              Object RESULT =null;
		 RESULT=Op2.op2Div(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op2",51, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Op2 ::= MOD 
            {
              Object RESULT =null;
		 RESULT=Op2.op2Mod(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op2",51, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Op2 ::= AND 
            {
              Object RESULT =null;
		 RESULT=Op2.op2And(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op2",51, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Op3 ::= MENOS 
            {
              Object RESULT =null;
		 RESULT=Op3.op3Menos(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op3",52, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Op3 ::= NOT 
            {
              Object RESULT =null;
		 RESULT=Op3.op3Not(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op3",52, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Op3NA ::= CASTINT 
            {
              Object RESULT =null;
		 RESULT=Op3NA.op3naCastInt(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op3NA",53, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Op3NA ::= CASTREAL 
            {
              Object RESULT =null;
		 RESULT=Op3NA.op3naCastReal(parser.fila()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op3NA",53, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

